Name: Arpit Jasapara, UID: 504742401

When I ran the command with -O2 only, I got:
0000000000000000 <testovf>:
   0:   31 c0                   xor    %eax,%eax
   2:   c3                      retq
If n > 0, the value overflows, with undefined behavior. If 
n <= 0, it will be false.

When I ran the command with -O2 -fwrapv, I got:
0000000000000000 <testovf>:
   0:   48 b8 ff ff ff ff ff    movabs $0x7fffffffffffffff,%rax
   7:   ff ff 7f
   a:   48 01 f8                add    %rdi,%rax
   d:   48 39 c7                cmp    %rax,%rdi
  10:   0f 9f c0                setg   %al
  13:   c3                      retq

The difference between this output and the previous output, 
is that this output accounts for overflow. It compares the sum 
to the original number to check if the signed value is greater, 
and thus checking for overflow, utilizing the Two's Complement 
wrapping. It will be true when n > 0, and false for n <= 0. 

When I ran the command with -O2 -fsanitize=undefined, I got:
0000000000000000 <testovf>:
   0:   55                      push   %rbp
   1:   53                      push   %rbx
   2:   48 ba ff ff ff ff ff    movabs $0x7fffffffffffffff,%rdx
   9:   ff ff 7f
   c:   48 89 fd                mov    %rdi,%rbp
   f:   48 89 fb                mov    %rdi,%rbx
  12:   48 83 ec 08             sub    $0x8,%rsp
  16:   48 01 d5                add    %rdx,%rbp
  19:   70 0d                   jo     28 <testovf+0x28>
  1b:   48 39 eb                cmp    %rbp,%rbx
  1e:   0f 9f c0                setg   %al
  21:   48 83 c4 08             add    $0x8,%rsp
  25:   5b                      pop    %rbx
  26:   5d                      pop    %rbp
  27:   c3                      retq
  28:   48 89 fe                mov    %rdi,%rsi
  2b:   bf 00 00 00 00          mov    $0x0,%edi
  30:   e8 00 00 00 00          callq  35 <testovf+0x35>
  35:   eb e4                   jmp    1b <testovf+0x1b>

The difference between this output and the previous output is that, 
an error message pops up when undefined behavior occurs. Undefined 
behavior occurs when n > 0, and for n <= 0, it won't overflow, so 
undefined behavior will not occur. The jo instruction is important to 
notice because that instruction is executed when overflow occurs. It 
jumps when the overflow flag is set, indicating potentially 
undefined behavior, and appropriately reporting it to the user.